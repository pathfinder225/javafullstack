Observer: Define a one-to-many dependency between objects so that when one object changes state, 
all its dependents are notified and updated automatically.
Template Method: Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. The 
template method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s 
structure.
Strategy : Define a family of algorithms, encapsulate each one, and make them interchangeable. The 
strategy pattern lets the algorithm vary independently from client to client.
Command: Encapsulate a request as an object, thereby letting you parameterize clients with different 
requests, queue or log requests, and support undoable operations
Iterator: Provide a way to access the elements of an aggregate object sequentially without exposing 
its underlying representation.
Memento:: Without violating encapsulation, capture and externalize an object’s internal state so that 
the object can be restored to this state later.
State: Allow an object to alter its behavior when its internal state changes. The object will appear to 
change its class.
Builder: Separate the construction of a complex object from its representation so that the same 
construction processes can create different representations.


Factory Method :Define an interface for creating an object, but let subclasses decide which class to 
instantiate. The factory method lets a class defer instantiation to subclasses.
Abstract Factory: Provides an interface for creating families of related or dependent objects without specifying 
their concrete classes.
Singleton:Ensure a class only has one instance, and provide a global point of access to it.
Builder: Separate the construction of a complex object from its representation so that the same 
construction processes can create different representations.

Adapter:  Convert the interface of a class into another interface that clients expect. The adapter 
pattern lets classes work together that couldn’t otherwise because of incompatible interfaces.
Proxy: Provide a surrogate or placeholder for another object to control access to it.
Decorator: : Attach additional responsibilities to an object dynamically. Decorators provide a flexible 
alternative to subclassing for extending functionality.
Facade: Provide a unified interface to a set of interfaces in a system. Facade defines a higher-level 
interface that makes the subsystem easier to use.
Flyweight: Use sharing to support large numbers of fine-grained objects efficiently
